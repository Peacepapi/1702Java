package com.revature.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

/**
 * Data Access Object - design pattern
 * 	--isolate the database access logic in one place
 * 	--cohesion.. classes have only one role
 * 
 * 1. CRUD methods for your domain object
 * 2. Outside of DAO is concerned with only domain objects.. not SQL!
 *
 */
public class ArtistDAO {

	public void save(Artist artist) throws Exception{ //would handle SQLExceptions here
		String sql = "INSERT INTO ARTIST(ARTISTID, NAME) VALUES(?, ?)";
		Connection conn = ConnectionFactory.getConnection();
		// pre-compile the SQL statement in Java
		PreparedStatement stmt = conn.prepareStatement(sql);
		// bind values safely to the placeholder ??s
		stmt.setString(2, artist.getName());
		stmt.setInt(1, artist.getArtistId());
		//INSERT INTO ARTIST(ARTISTID, NAME) VALUES(5, 'Dan')
		stmt.executeUpdate();
		conn.close();
	}
	
	public Artist findOne(int id) throws Exception{
		String sql = "SELECT ARTISTID, NAME FROM ARTIST WHERE ARTISTID = ?";
		PreparedStatement stmt = ConnectionFactory.getConnection()
				.prepareStatement(sql);
		stmt.setInt(1, id);
		// rows returned by database are stored in ResultSet object
		ResultSet rs = stmt.executeQuery(); 
		// iterate over the ResultSet and snatch values
		Artist artist = new Artist();
		while(rs.next()){ 
			// points the next row, returns true/false if there is a row
			// object-relational mapping
			artist.setArtistId( rs.getInt("ARTISTID") );
			artist.setName( rs.getString("NAME") );
		}
		return artist;
	}
	
}









