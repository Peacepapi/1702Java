package com.revature.patterns;

import com.revature.patterns.weapons.Longsword;
import com.revature.patterns.weapons.MachineGun;
import com.revature.patterns.weapons.Sword;

/**
 * Makes weapons
 * @author Patrick
 *	
 *	1. Complex instantiation logic
 *	2. Abstract concrete classes away
 *	3. Promotes loose-coupling (decouple)
 */
public class WeaponFactory {

	public static Weapon getMedievalWeapon(){
		//return new Sword(); // doesn't matter the concrete class
		return new Longsword();
	}
	
	public static Weapon getModernWeapon(){
		return new MachineGun();
	}
	
	/**
	 * Singleton always returns same object every time
	 * 
	 * 1. Saves memory
	 * 2. Only ever need that 
	 * 		one object.. typically stateless objects
	 * @return
	 */
	public Weapon getExcalibur(){
		return new Excalibur();
	}
	
}








